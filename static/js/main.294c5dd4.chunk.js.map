{"version":3,"sources":["services/WeatherService.js","components/Input/Input.jsx","components/Card/Card.jsx","App.js","serviceWorker.js","index.js"],"names":["WeatherService","this","_url","_titles","getWeather","bind","titleIndex","Math","floor","random","e","city","target","elements","value","fetch","inputCityUrl","json","data","SearchBlock","styled","div","Input","props","onSubmit","findForecast","name","onChange","inputCity","type","required","placeholder","Card","Weather","icon","cityName","src","alt","windSpeed","clouds","temp","humidity","pressure","windDeg","Container","App","weather","state","visible","visibility","preventDefault","then","response","d","console","log","setState","all","main","wind","speed","inputValue","title","setRandomTitle","foundCity","className","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.294c5dd4.chunk.js","sourcesContent":["export default class WeatherService {\r\n    #APP_ID = \"&appid=e7651cfedf9e77b455ed7fda7a267fed\";\r\n    #lang = \"ru\";\r\n    #units = \"metric\";\r\n\r\n    constructor() {\r\n        this._url = `https://api.openweathermap.org/data/2.5/weather?q=`;\r\n        this._titles = [\"Погода!\", \"Самый точный прогноз\", \"Forecast для вас!\"];\r\n\r\n        this.getWeather = this.getWeather.bind(this)\r\n    }\r\n\r\n    //Установка случайного заголовка\r\n    setRandomTitle() {\r\n        let titleIndex = Math.floor(Math.random()*3);\r\n        return this._titles[titleIndex];\r\n    }\r\n\r\n    //Получение погоды через input\r\n    async getWeather(e) {\r\n        let city = e.target.elements.city.value;\r\n        const inputCityUrl = await fetch(`${this._url}${city}${this.#APP_ID}&lang=${this.#lang}&units=${this.#units}`);\r\n        const data = await inputCityUrl.json();\r\n\r\n        return data;\r\n    }\r\n}","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst SearchBlock = styled.div`\r\n    & input {\r\n        width: 50%;\r\n        box-shadow: 0px 0px 5px -1px rgba(61,61,61,1);\r\n        padding: 5px 20px;\r\n        border-radius: 3px;\r\n        border: 1px solid;\r\n        outline: none;\r\n        font-family: 'Roboto', sans-serif;\r\n        font-weight: 500;\r\n        border: none;\r\n        font-size: 1rem;\r\n    }\r\n    \r\n    & button {\r\n        padding: 5px 20px;\r\n        margin-left: 5px;\r\n        cursor: pointer;\r\n        box-shadow: 0px 0px 5px -1px rgba(61,61,61,1);\r\n        font-family: 'Roboto', sans-serif;\r\n        font-weight: 500;\r\n        background: #2196F3;\r\n        outline: none;\r\n        border: none;\r\n        border-radius: 5px;\r\n        color: white;\r\n        font-size: 1rem;\r\n    }\r\n`;\r\n\r\nconst Input = (props) => {\r\n    return (\r\n        <SearchBlock>\r\n            <form onSubmit={props.findForecast}>\r\n                <input name=\"city\" onChange={props.inputCity} type=\"text\" required={true} placeholder=\"Введите название города\"/>\r\n                <button>Найти</button>\r\n            </form>\r\n        </SearchBlock>\r\n    );\r\n};\r\n\r\nexport default Input;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Card = styled.div`\r\n    width: 64%;\r\n    margin: auto;\r\n    margin-top: 50px;\r\n    color: white;\r\n    padding: 50px;\r\n    border-radius: 5px;\r\n    text-align: start;\r\n    box-shadow: 0px 0px 5px 1px rgba(61,61,61,1);\r\n    background: #3F51B5;\r\n    font-family: 'Ubuntu', sans-serif;\r\n    \r\n    & h3 {\r\n        text-align: center;\r\n    }\r\n    \r\n    & div {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n        font-size: 18px;\r\n    }\r\n    \r\n    & div img {\r\n        width: 30px;\r\n        height: 30px;\r\n        margin-right: 5px;\r\n    }\r\n    \r\n    & div:first-child {\r\n        justify-content: center;\r\n    }\r\n    \r\n    & div span {\r\n        font-weight: 500;\r\n    }\r\n`;\r\n\r\nconst Weather = (props) => {\r\n    const icon = `http://openweathermap.org/img/w/${props.icon}.png`;\r\n\r\n    return (\r\n        <Card>\r\n            <div>\r\n                <h3>Город: {props.cityName} </h3>\r\n                <img src={icon} alt=\"Weather state\"/>\r\n            </div>\r\n           <div>\r\n               <div>\r\n                   <img src=\"https://img.icons8.com/dusk/64/000000/wind.png\" alt=\"Wind speed\"/>\r\n                   <p> Ветер: <span>{props.windSpeed}</span> м/с</p>\r\n               </div>\r\n               <div>\r\n                   <img src=\"https://img.icons8.com/cotton/64/000000/clouds.png\" alt=\"Cloudiness\"/>\r\n                   <p>Облачность: <span>{props.clouds}</span>%</p>\r\n               </div>\r\n           </div>\r\n            <div>\r\n                <div>\r\n                    <img src=\"https://img.icons8.com/ultraviolet/40/000000/temperature-sensitive.png\" alt=\"Temperature\"/>\r\n                    <p>Температура: <span>{props.temp} </span>&deg;C</p>\r\n                </div>\r\n               <div>\r\n                   <img src=\"https://img.icons8.com/ultraviolet/48/000000/wet.png\" alt=\"Humidity\"/>\r\n                   <p>Влажность: <span>{props.humidity}</span>%</p>\r\n               </div>\r\n            </div>\r\n            <div>\r\n                <div>\r\n                    <img src=\"https://img.icons8.com/officexs/40/000000/pressure.png\" alt=\"Pressure\"/>\r\n                    <p>Давление: <span>{Math.floor(props.pressure * 0.75)} </span>мм.рт.ст</p>\r\n                </div>\r\n                <div>\r\n                    <img src=\"https://img.icons8.com/cotton/40/000000/telescope.png\" alt=\"Visibility\"/>\r\n                    <p>Видимость <span>{props.windDeg /1000} </span> км.</p>\r\n                </div>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Weather;","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport WeatherService from \"./services/WeatherService\";\r\nimport Input from \"./components/Input/Input\";\r\nimport Card from \"./components/Card/Card\";\r\n\r\nconst Container = styled.div`\r\n  max-width: 800px;\r\n  margin 0 auto;\r\n  text-align: center;\r\n  \r\n  & h1 {\r\n    color: white;\r\n    font-family: 'Balsamiq Sans', cursive;\r\n    font-weight: 700;\r\n    font-style: italic;\r\n    margin-top: 100px;\r\n  }\r\n`;\r\n\r\nexport default class App extends React.Component{\r\n    weather = new WeatherService();\r\n\r\n    state = {\r\n        visible: false,\r\n        clouds: null,\r\n        cityName: null,\r\n        temp: null,\r\n        windSpeed: null,\r\n        pressure: null,\r\n        humidity: null,\r\n        visibility: null,\r\n        icon: null\r\n    };\r\n\r\n    findForecast = (e) => {\r\n        e.preventDefault();\r\n        let data = this.weather.getWeather(e);\r\n\r\n        data.then(response => response)\r\n            .then(d => {\r\n                console.log(d);\r\n                this.setState({\r\n                    visible: !this.state.visible,\r\n                    clouds: d.clouds.all,\r\n                    cityName: d.name,\r\n                    temp: d.main.temp,\r\n                    windSpeed: d.wind.speed,\r\n                    visibility: d.visibility,\r\n                    pressure: d.main.pressure,\r\n                    humidity: d.main.humidity,\r\n                    icon: d.weather[0].icon\r\n                })\r\n            })\r\n    };\r\n\r\n    inputCity = (e) => {\r\n        console.log(e.target.value);\r\n        this.setState({\r\n            inputValue: e.target.value\r\n        })\r\n    };\r\n\r\n    render() {\r\n        let title = this.weather.setRandomTitle();\r\n        let foundCity = this.state.visible ?  <Card icon={this.state.icon} windDeg={this.state.visibility} humidity={this.state.humidity} pressure={this.state.pressure} temp={this.state.temp} cityName={this.state.cityName} windSpeed={this.state.windSpeed} clouds={this.state.clouds}/> : null;\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <Container>\r\n                    <h1>{ title }</h1>\r\n                    <Input inputCity={this.inputCity} findForecast={this.findForecast}/>\r\n                    { foundCity }\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}