{"version":3,"sources":["assets/wind.svg","services/WeatherService.js","components/Input/Input.jsx","components/Card/WeatherParams/NameParam.jsx","components/Card/WeatherParams/WindParam.jsx","components/Card/WeatherParams/CloudinessParam.jsx","components/Card/WeatherParams/VisibilityParam.jsx","components/Card/WeatherParams/HumidityParam.jsx","components/Card/WeatherParams/TemperatureParam.jsx","components/Card/WeatherParams/PressureParam.jsx","components/OpenButton/OpenButton.jsx","components/Card/Card.jsx","components/AnimationLayer/AnimationLayer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","WeatherService","this","_url","_titles","getWeather","bind","titleIndex","Math","floor","random","city","fetch","data","json","e","target","elements","value","inputCityUrl","SearchButton","styled","button","SearchBlock","div","Input","props","onSubmit","findForecast","autoCorrect","name","onChange","inputCity","type","required","placeholder","NameParam","cityName","src","icon","alt","WindParam","windSpeed","CloudinessParam","cloudiness","VisibilityParam","visibility","HumidityParam","humidity","TemperatureParam","temp","PressureParam","pressure","Button","OpenButton","width","Card","Weather","clouds","rotate","keyframes","float","pulsing","Rotation","Pulsation","Floating","Wind","wind","style","height","padding","AnimationLayer","position","right","top","left","Container","App","weather","state","loading","visible","title","changeState","then","response","d","console","log","setState","all","main","speed","setDefaultWeather","getDefaultWeather","preventDefault","inputValue","setRandomTitle","foundCity","color","className","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,kC,gOCAtBC,E,WAKjB,aAAe,oEAJL,4CAII,gDAHN,OAGM,gDAFL,WAGLC,KAAKC,KAAL,qDACAD,KAAKE,QAAU,CAAC,wCAAW,iHAAwB,kDAAqB,yDAAa,yDAErFF,KAAKG,WAAaH,KAAKG,WAAWC,KAAKJ,M,6DAKvC,IAAIK,EAAaC,KAAKC,MAAoB,EAAdD,KAAKE,UACjC,OAAOR,KAAKE,QAAQG,K,+KAGAI,E,+BAAK,uC,SACNC,MAAM,GAAD,OAAIV,KAAKC,MAAT,OAAgBQ,GAAhB,mBAAuBT,KAAvB,mCAA4CA,KAA5C,oCAAgEA,KAAhE,Q,cAAlBW,E,gBACOA,EAAKC,O,wNAILC,G,gFACTJ,EAAOI,EAAEC,OAAOC,SAASN,KAAKO,M,SACPN,MAAM,GAAD,OAAIV,KAAKC,MAAT,OAAgBQ,GAAhB,mBAAuBT,KAAvB,mCAA4CA,KAA5C,oCAAgEA,KAAhE,Q,cAA1BiB,E,gBACOA,EAAaL,O,wjCCxB3B,IAAMM,EAAeC,IAAOC,OAAV,KAenBC,EAAcF,IAAOG,IAAV,KA4BFC,EAXD,SAACC,GACX,OACI,kBAACH,EAAD,KACI,0BAAMI,SAAUD,EAAME,cAClB,2BAAOC,YAAY,KAAKC,KAAK,OAAOC,SAAUL,EAAMM,UAAWC,KAAK,OAAOC,UAAU,EAAMC,YAAY,qIACvG,kBAACf,EAAD,0CC7BDgB,EATG,SAACV,GACf,OACI,6BACI,+DAAYA,EAAMW,SAAlB,KACA,yBAAKC,IAAKZ,EAAMa,KAAMC,IAAI,oBCKvBC,EATG,SAACf,GACf,OACI,6BACI,yBAAKY,IAAI,iDAAiDE,IAAI,eAC9D,+DAAW,8BAAOd,EAAMgB,WAAxB,oBCKGC,EATS,SAACjB,GACrB,OACI,6BACI,yBAAKY,IAAI,qDAAqDE,IAAI,eAClE,4FAAe,8BAAOd,EAAMkB,YAA5B,OCKGC,EATS,SAACnB,GACrB,OACI,6BACI,yBAAKY,IAAI,wDAAwDE,IAAI,eACrE,qFAAa,8BAAOd,EAAMoB,WAAY,IAAzB,KAAb,oBCKGC,EATO,SAACrB,GACnB,OACI,6BACI,yBAAKY,IAAI,uDAAuDE,IAAI,aACpE,sFAAc,8BAAOd,EAAMsB,UAA3B,OCKGC,EATU,SAACvB,GACtB,OACI,6BACI,yBAAKY,IAAI,yEAAyEE,IAAI,gBACtF,kGAAgB,8BAAOd,EAAMwB,KAAb,KAAhB,WCKGC,EATO,SAACzB,GACnB,OACI,6BACI,yBAAKY,IAAI,yDAAyDE,IAAI,aACtE,gFAAa,8BAAOhC,KAAKC,MAAuB,IAAjBiB,EAAM0B,UAAxB,KAAb,4C,+LCFZ,IAAMC,EAAShC,YAAOD,EAAPC,CAAH,KAcGiC,EANI,WACf,OACI,kBAACD,EAAD,KAAQ,yBAAKE,MAAM,OAAOjB,IAAI,wDAAwDE,IAAI,KAA1F,4G,2xBCHR,IAAMgB,EAAOnC,IAAOG,IAAV,KAgEKiC,EAzBC,SAAC/B,GACb,IAAMa,EAAI,0CAAsCb,EAAMa,KAA5C,QAEV,OACI,kBAACiB,EAAD,KACG,6BACI,kBAAC,EAAD,CAAWnB,SAAUX,EAAMW,SAAUE,KAAMA,KAE9C,6BACG,kBAAC,EAAD,CAAWG,UAAWhB,EAAMgB,YAC7B,kBAAC,EAAD,CAAkBQ,KAAMxB,EAAMwB,QAEhC,6BACG,kBAAC,EAAD,CAAiBJ,WAAYpB,EAAMoB,aACnC,kBAAC,EAAD,CAAeE,SAAUtB,EAAMsB,YAElC,6BACI,kBAAC,EAAD,CAAeI,SAAU1B,EAAM0B,WAC/B,kBAAC,EAAD,CAAiBR,WAAYlB,EAAMgC,UAEvC,kBAAC,EAAD,Q,wtCClEZ,IAAMC,EAASC,YAAH,KAMNC,EAAQD,YAAH,KAcLE,EAAUF,YAAH,KAUPG,EAAW1C,IAAOG,IAAV,IACGmC,GAMXK,EAAY3C,IAAOG,IAAV,IACOsC,GAOhBG,EAAW5C,IAAOG,IAAV,IAIGqC,GAGJK,GAAO,WAChB,OAAO,kBAACH,EAAD,KAAU,yBAAKzB,IAAK6B,IAAM3B,IAAI,GAAG4B,MAAO,CAACb,MAAO,MAAOc,OAAQ,MAAOC,QAAS,YAmB3EC,GAhBQ,WACnB,OACI,6BACI,kBAACN,EAAD,KACI,yBAAKG,MAAO,CAACI,SAAU,WAAYC,MAAO,OAAQC,IAAK,OAAQpC,IAAI,kDAAkDE,IAAI,WAE7H,kBAACyB,EAAD,KACI,yBAAKG,MAAO,CAACI,SAAU,WAAYC,MAAO,MAAOE,KAAM,QAASrC,IAAI,kDAAkDE,IAAI,WAE9H,kBAACwB,EAAD,KACI,yBAAKI,MAAO,CAACI,SAAU,WAAYC,MAAO,MAAOC,IAAK,OAAQpC,IAAI,kDAAkDE,IAAI,a,kSC9DxI,IAAMoC,GAAYvD,IAAOG,IAAV,MAcMqD,G,4MACjBC,QAAU,IAAI7E,E,EAEd8E,MAAQ,CACJC,SAAS,EACTC,SAAS,EACTC,MAAO,KACPJ,QAAS,I,EAGbK,YAAc,SAACtE,GACXA,EAAKuE,MAAK,SAAAC,GAAQ,OAAIA,KACjBD,MAAK,SAAAE,GACFC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACVT,SAAS,EACTC,SAAS,EACTH,QAAS,CACLpB,OAAQ4B,EAAE5B,OAAOgC,IACjBrD,SAAUiD,EAAExD,KACZoB,KAAMoC,EAAEK,KAAKzC,KACbR,UAAW4C,EAAEnB,KAAKyB,MAClB9C,WAAYwC,EAAExC,WACdM,SAAUkC,EAAEK,KAAKvC,SACjBJ,SAAUsC,EAAEK,KAAK3C,SACjBT,KAAM+C,EAAER,QAAQ,GAAGvC,Y,EAMvCsD,kBAAoB,WAChB,IAAIhF,EAAO,EAAKiE,QAAQgB,oBACxB,EAAKX,YAAYtE,I,EAGrBe,aAAe,SAACb,GACZA,EAAEgF,iBACF,EAAKN,SAAS,CAACT,SAAS,IACxB,IAAInE,EAAO,EAAKiE,QAAQzE,WAAWU,GAEnC,EAAKoE,YAAYtE,I,EAGrBmB,UAAY,SAACjB,GACTwE,QAAQC,IAAIzE,EAAEC,OAAOE,OACrB,EAAKuE,SAAS,CACVO,WAAYjF,EAAEC,OAAOE,S,kEAKzBhB,KAAKuF,SAAS,CAACP,MAAOhF,KAAK4E,QAAQmB,mBACnC/F,KAAK2F,sB,+BAIL,IAAIK,EAAYhG,KAAK6E,MAAME,UAAkC,IAAvB/E,KAAK6E,MAAMC,QAC7C,kBAAC,EAAD,CAASzC,KAAMrC,KAAK6E,MAAMD,QAAQvC,KACzBO,WAAY5C,KAAK6E,MAAMD,QAAQhC,WAC/BE,SAAU9C,KAAK6E,MAAMD,QAAQ9B,SAC7BI,SAAUlD,KAAK6E,MAAMD,QAAQ1B,SAC7BF,KAAMhD,KAAK6E,MAAMD,QAAQ5B,KACzBb,SAAUnC,KAAK6E,MAAMD,QAAQzC,SAC7BK,UAAWxC,KAAK6E,MAAMD,QAAQpC,UAC9BgB,OAAQxD,KAAK6E,MAAMD,QAAQpB,SAAY,wBAAIU,MAAO,CAAC+B,MAAO,UAAnB,uDACpD,OACI,yBAAKC,UAAU,OACX,kBAACxB,GAAD,KACI,kBAAC,GAAD,MACA,4BAAK1E,KAAK6E,MAAMG,OAChB,kBAAC,EAAD,CAAOlD,UAAW9B,KAAK8B,UAAWJ,aAAc1B,KAAK0B,eACpDsE,EACD,kBAAC,GAAD,Y,GAzEaG,IAAMC,WCVnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,aCXNC,IAASC,OACR,kBAAC,KAAD,KACI,kBAAC,IAAMC,WAAP,KACI,kBAAC,GAAD,QAGPC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.b88ff99f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wind.d67376f9.svg\";","export default class WeatherService {\r\n    #APP_ID = \"&appid=e7651cfedf9e77b455ed7fda7a267fed\";\r\n    #lang = \"ru\";\r\n    #units = \"metric\";\r\n\r\n    constructor() {\r\n        this._url = `https://api.openweathermap.org/data/2.5/weather?q=`;\r\n        this._titles = [\"Погода!\", \"Самый точный прогноз\", \"Forecast для вас!\", \"Погодочка\", \"Эх.. Погода..\"];\r\n\r\n        this.getWeather = this.getWeather.bind(this)\r\n    }\r\n\r\n    //Установка случайного заголовка\r\n    setRandomTitle() {\r\n        let titleIndex = Math.floor(Math.random()*3);\r\n        return this._titles[titleIndex];\r\n    }\r\n\r\n    async getDefaultWeather(city=\"Москва\") {\r\n        const data = await fetch(`${this._url}${city}${this.#APP_ID}&lang=${this.#lang}&units=${this.#units}`);\r\n        return await data.json();\r\n    }\r\n\r\n    //Получение погоды через input\r\n    async getWeather(e) {\r\n        let city = e.target.elements.city.value;\r\n        const inputCityUrl = await fetch(`${this._url}${city}${this.#APP_ID}&lang=${this.#lang}&units=${this.#units}`);\r\n        return await inputCityUrl.json();\r\n    }\r\n}","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const SearchButton = styled.button`\r\n        padding: 5px 20px;\r\n        margin-left: 5px;\r\n        cursor: pointer;\r\n        box-shadow: 0px 0px 5px -1px rgba(61,61,61,1);\r\n        font-family: 'Roboto', sans-serif;\r\n        font-weight: 500;\r\n        background: #2196F3;\r\n        outline: none;\r\n        border: none;\r\n        border-radius: 5px;\r\n        color: white;\r\n        font-size: 1rem;\r\n`;\r\n\r\nconst SearchBlock = styled.div`\r\n    margin-bottom: 20px;\r\n\r\n    & input {\r\n        width: 50%;\r\n        box-shadow: 0px 0px 5px -1px rgba(61,61,61,1);\r\n        padding: 5px 20px;\r\n        border-radius: 3px;\r\n        border: 1px solid;\r\n        outline: none;\r\n        font-family: 'Roboto', sans-serif;\r\n        font-weight: 500;\r\n        border: none;\r\n        font-size: 1rem;\r\n    }\r\n`;\r\n\r\nconst Input = (props) => {\r\n    return (\r\n        <SearchBlock>\r\n            <form onSubmit={props.findForecast}>\r\n                <input autoCorrect=\"on\" name=\"city\" onChange={props.inputCity} type=\"text\" required={true} placeholder=\"Введите название города\"/>\r\n                <SearchButton>Найти</SearchButton>\r\n            </form>\r\n        </SearchBlock>\r\n    );\r\n};\r\n\r\nexport default Input;","import React from \"react\";\r\n\r\nconst NameParam = (props) => {\r\n    return (\r\n        <div>\r\n            <h3>Город: {props.cityName} </h3>\r\n            <img src={props.icon} alt=\"Weather state\"/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NameParam;","import React from \"react\";\r\n\r\nconst WindParam = (props) => {\r\n    return (\r\n        <div>\r\n            <img src=\"https://img.icons8.com/dusk/64/000000/wind.png\" alt=\"Wind speed\"/>\r\n            <p> Ветер: <span>{props.windSpeed}</span> м/с</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WindParam;","import React from \"react\";\r\n\r\nconst CloudinessParam = (props) => {\r\n    return (\r\n        <div>\r\n            <img src=\"https://img.icons8.com/cotton/64/000000/clouds.png\" alt=\"Cloudiness\"/>\r\n            <p>Облачность: <span>{props.cloudiness}</span>%</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CloudinessParam;","import React from \"react\";\r\n\r\nconst VisibilityParam = (props) => {\r\n    return (\r\n        <div>\r\n            <img src=\"https://img.icons8.com/cotton/40/000000/telescope.png\" alt=\"Visibility\"/>\r\n            <p>Видимость <span>{props.visibility /1000} </span> км.</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VisibilityParam;","import React from \"react\";\r\n\r\nconst HumidityParam = (props) => {\r\n    return (\r\n        <div>\r\n            <img src=\"https://img.icons8.com/ultraviolet/48/000000/wet.png\" alt=\"Humidity\"/>\r\n            <p>Влажность: <span>{props.humidity}</span>%</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HumidityParam;","import React from \"react\";\r\n\r\nconst TemperatureParam = (props) => {\r\n    return (\r\n        <div>\r\n            <img src=\"https://img.icons8.com/ultraviolet/40/000000/temperature-sensitive.png\" alt=\"Temperature\"/>\r\n            <p>Температура: <span>{props.temp} </span>&deg;C</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TemperatureParam;","import React from \"react\";\r\n\r\nconst PressureParam = (props) => {\r\n    return (\r\n        <div>\r\n            <img src=\"https://img.icons8.com/officexs/40/000000/pressure.png\" alt=\"Pressure\"/>\r\n            <p>Давление: <span>{Math.floor(props.pressure * 0.75)} </span>мм.рт.ст</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PressureParam;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {SearchButton} from \"../Input/Input\"\r\n\r\nconst Button = styled(SearchButton)`\r\n    margin-top: 25px;\r\n    padding: 10px 20px;\r\n    background: #d32f2f;\r\n    display: flex;\r\n    align-items: center;\r\n`;\r\n\r\nconst OpenButton = () => {\r\n    return (\r\n        <Button><img width=\"30px\" src=\"https://img.icons8.com/offices/50/000000/gas-mask.png\" alt=\"\"/>Индекс загрязнения</Button>\r\n    );\r\n};\r\n\r\nexport default OpenButton;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport NameParam from \"./WeatherParams/NameParam\";\r\nimport WindParam from \"./WeatherParams/WindParam\";\r\nimport CloudinessParam from \"./WeatherParams/CloudinessParam\";\r\nimport VisibilityParam from \"./WeatherParams/VisibilityParam\";\r\nimport HumidityParam from \"./WeatherParams/HumidityParam\";\r\nimport TemperatureParam from \"./WeatherParams/TemperatureParam\";\r\nimport PressureParam from \"./WeatherParams/PressureParam\";\r\nimport OpenButton from \"../OpenButton/OpenButton\";\r\n\r\nconst Card = styled.div`\r\n    width: 64%;\r\n    margin: auto;\r\n    margin-top: 50px;\r\n    margin-bottom: 50px;\r\n    color: white;\r\n    padding: 50px;\r\n    border-radius: 5px;\r\n    text-align: start;\r\n    box-shadow: 0px 0px 5px 1px rgba(61,61,61,1);\r\n    background: #3F51B5;\r\n    font-family: 'Ubuntu', sans-serif;\r\n    \r\n    & h3 {\r\n        text-align: center;\r\n    }\r\n    \r\n    & div {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n        font-size: 18px;\r\n    }\r\n    \r\n    & div img {\r\n        width: 30px;\r\n        height: 30px;\r\n        margin-right: 5px;\r\n    }\r\n    \r\n    & div:first-child {\r\n        justify-content: center;\r\n    }\r\n    \r\n    & div span {\r\n        font-weight: 500;\r\n    }\r\n`;\r\n\r\nconst Weather = (props) => {\r\n    const icon = `http://openweathermap.org/img/w/${props.icon}.png`;\r\n\r\n    return (\r\n        <Card>\r\n           <div>\r\n               <NameParam cityName={props.cityName} icon={icon}/>\r\n           </div>\r\n            <div>\r\n               <WindParam windSpeed={props.windSpeed}/>\r\n              <TemperatureParam temp={props.temp}/>\r\n            </div>\r\n            <div>\r\n               <VisibilityParam visibility={props.visibility}/>\r\n               <HumidityParam humidity={props.humidity}/>\r\n            </div>\r\n            <div>\r\n                <PressureParam pressure={props.pressure}/>\r\n                <CloudinessParam cloudiness={props.clouds}/>\r\n            </div>\r\n            <OpenButton/>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Weather;","import React from \"react\";\r\nimport styled, {keyframes} from \"styled-components\";\r\nimport wind from \"../../assets/wind.svg\";\r\n\r\nconst rotate = keyframes`\r\n    100% {\r\n        transform: rotate(-360deg);\r\n    }\r\n`;\r\n\r\nconst float = keyframes`\r\n    0%, 100% {\r\n        transform: translate(0);\r\n    }\r\n    \r\n    50% {\r\n        transform: translate(50%);\r\n    }\r\n    \r\n    75% {\r\n        transform: translate(75%); \r\n    }\r\n`;\r\n\r\nconst pulsing = keyframes`\r\n    0%, 100% {\r\n        transform: scale(1);\r\n    }\r\n    \r\n    50% {\r\n        transform: scale(1.1);\r\n    }\r\n`;\r\n\r\nconst Rotation = styled.div`\r\n    animation: ${rotate};\r\n    animation-duration: 1.8s;\r\n    animation-timing-function: linear;\r\n    animation-iteration-count: infinite; \r\n`;\r\n\r\nconst Pulsation = styled.div`\r\n    animation-name: ${pulsing};\r\n    animation-duration: 3s;\r\n    animation-timing-function: ease-in-out;\r\n    animation-iteration-count: infinite; \r\n    animation-fill-mode: forwards;\r\n`;\r\n\r\nconst Floating = styled.div`\r\n    display: inline-block;\r\n    position: absolute;\r\n    margin: 10px;\r\n    animation: ${float} 5s ease-in-out 0s infinite alternate forwards;\r\n}`;\r\n\r\nexport const Wind = () => {\r\n    return <Rotation><img src={wind} alt=\"\" style={{width: \"4em\", height: \"4em\", padding: \"10px\"}}/></Rotation>\r\n};\r\n\r\nconst AnimationLayer = () => {\r\n    return (\r\n        <div>\r\n            <Floating>\r\n                <img style={{position: \"relative\", right: \"19em\", top: \"2em\"}} src=\"https://img.icons8.com/dusk/64/000000/cloud.png\" alt=\"cloud\"/>\r\n            </Floating>\r\n            <Floating>\r\n                <img style={{position: \"relative\", right: \"7em\", left: \"10em\"}} src=\"https://img.icons8.com/dusk/64/000000/cloud.png\" alt=\"cloud\"/>\r\n            </Floating>\r\n            <Pulsation>\r\n                <img style={{position: \"relative\", right: \"2em\", top: \"6em\"}} src=\"https://img.icons8.com/dusk/64/000000/cloud.png\" alt=\"cloud\"/>\r\n            </Pulsation>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AnimationLayer;","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport WeatherService from \"./services/WeatherService\";\r\nimport Input from \"./components/Input/Input\";\r\nimport Weather from \"./components/Card/Card\";\r\nimport AnimationLayer from \"./components/AnimationLayer/AnimationLayer\";\r\nimport {Wind} from \"./components/AnimationLayer/AnimationLayer\";\r\n\r\nconst Container = styled.div`\r\n  max-width: 800px;\r\n  margin 0 auto;\r\n  text-align: center;\r\n  margin-bottom: 150px;\r\n  \r\n  & h1 {\r\n    color: white;\r\n    font-family: 'Balsamiq Sans', cursive;\r\n    font-weight: 700;\r\n    font-style: italic;\r\n  }\r\n`;\r\n\r\nexport default class App extends React.Component {\r\n    weather = new WeatherService();\r\n\r\n    state = {\r\n        loading: false,\r\n        visible: false,\r\n        title: null,\r\n        weather: {}\r\n    };\r\n\r\n    changeState = (data) => {\r\n        data.then(response => response)\r\n            .then(d => {\r\n                console.log(d);\r\n                this.setState({\r\n                    loading: false,\r\n                    visible: true,\r\n                    weather: {\r\n                        clouds: d.clouds.all,\r\n                        cityName: d.name,\r\n                        temp: d.main.temp,\r\n                        windSpeed: d.wind.speed,\r\n                        visibility: d.visibility,\r\n                        pressure: d.main.pressure,\r\n                        humidity: d.main.humidity,\r\n                        icon: d.weather[0].icon\r\n                    }\r\n                })\r\n            })\r\n    };\r\n\r\n    setDefaultWeather = () => {\r\n        let data = this.weather.getDefaultWeather();\r\n        this.changeState(data);\r\n    };\r\n\r\n    findForecast = (e) => {\r\n        e.preventDefault();\r\n        this.setState({loading: true});\r\n        let data = this.weather.getWeather(e);\r\n\r\n        this.changeState(data);\r\n    };\r\n\r\n    inputCity = (e) => {\r\n        console.log(e.target.value);\r\n        this.setState({\r\n            inputValue: e.target.value\r\n        })\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.setState({title: this.weather.setRandomTitle()});\r\n        this.setDefaultWeather();\r\n    }\r\n\r\n    render() {\r\n        let foundCity = this.state.visible && this.state.loading === false ?\r\n            <Weather icon={this.state.weather.icon}\r\n                     visibility={this.state.weather.visibility}\r\n                     humidity={this.state.weather.humidity}\r\n                     pressure={this.state.weather.pressure}\r\n                     temp={this.state.weather.temp}\r\n                     cityName={this.state.weather.cityName}\r\n                     windSpeed={this.state.weather.windSpeed}\r\n                     clouds={this.state.weather.clouds}/> : <h3 style={{color: \"white\"}}>Загрузка...</h3>;\r\n        return (\r\n            <div className=\"App\">\r\n                <Container>\r\n                    <Wind/>\r\n                    <h1>{this.state.title}</h1>\r\n                    <Input inputCity={this.inputCity} findForecast={this.findForecast}/>\r\n                    {foundCity}\r\n                    <AnimationLayer/>\r\n                </Container>\r\n\r\n            </div>\r\n        );\r\n    }\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n <BrowserRouter>\r\n     <React.StrictMode>\r\n         <App />\r\n     </React.StrictMode>\r\n </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}